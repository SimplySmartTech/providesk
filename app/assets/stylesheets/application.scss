/* Core Loaded */
/* Variables & mixins Loaded */
/**
 * Define variables here
 */
/* Media Query variables*/
/* Normalize */
/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

@import "bootstrap-sprockets";
@import "bootstrap";
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
  text-decoration: none;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* fonts */
@font-face {
  font-family: 'eina-bold';
  src: asset-url("eina01-bold-webfont.woff2") format("woff2"), asset-url("eina01-bold-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'eina-semibold';
  src: asset-url("eina01-semibold-webfont.woff2") format("woff2"), asset-url("eina01-semibold-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

/* Common Styles */
/* Typography */
html,
body {
  height: 100%;
  padding: 0;
  margin: 0;
  font-size: 14px;
}

* {
  box-sizing: border-box;
}

body {
  height: 100vh;
  font-family: "eina-semibold", Helvetica Neue, Helvetica, Arial, sans-serif;
}

a:focus {
  outline: none;
}

*:focus {
  outline: none;
}

.pd-header {
  background-color: #22103F;
  display: -moz-flex;
  display: flex;
  -moz-justify-content: center;
  justify-content: center;
  padding: 0 15px 6px;
  border-bottom: 1px solid #ffffff;
}

@media screen and (max-width: 767px) {
  .pd-header {
    -moz-justify-content: space-between;
    justify-content: space-between;
  }
}

.pd-header .navbar-brand {
  display: block;
  font-size: 22px;
  overflow: hidden;
  width: 167px;
  height: 58px;
  border-radius: 0px 0px 5px 5px;
  color: #ffffff;
  background: white image-url("providesk-logo.png") no-repeat center;
  text-indent: -1000%;
}

.pd-header .navbar-nav {
  display: -moz-flex;
  display: flex;
  -moz-flex-direction: row;
  flex-direction: row;
  -moz-align-items: center;
  align-items: center;
  margin: 0;
}

.pd-header .navbar-nav > li > a {
  padding: 20px 32px;
  margin: 0 10px;
  font-size: 16px;
  line-height: 19px;
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-header .navbar-nav > li > a {
    padding: 20px 10px;
    margin: 0;
  }
}

.pd-header .navbar-nav > li > a:hover {
  color: #F9BC16;
}

@media screen and (max-width: 767px) {
  .pd-header .navbar-nav {
    display: block;
    position: absolute;
    top: 65px;
    left: 0;
    right: 0;
    background-color: #22103F;
    padding: 0 15px;
    max-height: 0;
    transition: max-height 0.5s ease;
    overflow: hidden;
  }
  .pd-header .navbar-nav > li > a {
    display: block;
    padding: 18px;
    text-align: center;
    font-size: 14px;
  }
  .pd-header .navbar-nav > li.app-links > a {
    padding: 8px;
  }
  .pd-header .navbar-nav.open {
    max-height: 500px;
    transition: max-height 0.5s ease-in;
    display: block;
    z-index: 9;
  }
}

.navbar-toggle {
  position: relative;
  border: none;
  padding: 9px 10px;
  height: 40px;
  margin: 10px 0 4px 0;
  display: none;
  border-radius: 5px;
  background-color: #ffffff;
}

@media screen and (max-width: 767px) {
  .navbar-toggle {
    display: block;
  }
}

.navbar-toggle .icon-bar {
  display: block;
  width: 22px;
  height: 2px;
  border-radius: 1px;
  background-color: #FF4555;
  margin: 0 auto;
}

.navbar-toggle .icon-bar + .icon-bar {
  margin-top: 4px;
}

.pd-footer {
  display: -moz-flex;
  display: flex;
  -moz-flex-direction: column;
  flex-direction: column;
  -moz-align-items: center;
  align-items: center;
  -moz-justify-content: center;
  justify-content: center;
  text-align: center;
  padding-top: 140px;
  border-top: 1px solid #E0E0E0;
}

@media screen and (max-width: 767px) {
  .pd-footer {
    padding: 20px 15px 0;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-footer {
    padding: 80px 15px 0;
  }
}

.pd-footer .pink {
  color: #FF3946;
  font-family: "eina-bold", Helvetica Neue, Helvetica, Arial, sans-serif;
}

.pd-footer .black {
  color: #2A2B2C;
}

.pd-footer ul {
  display: -moz-flex;
  display: flex;
  padding-bottom: 138px;
}

@media screen and (max-width: 767px) {
  .pd-footer ul {
    display: inline-block;
    padding-bottom: 10px;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-footer ul {
    display: inline-block;
    padding-bottom: 10px;
  }
  .pd-footer ul li {
    margin-bottom: 20px;
  }
}

.pd-footer ul li {
  padding: 0 20px;
  display: -moz-flex;
  display: flex;
  -moz-align-items: center;
  align-items: center;
}

@media screen and (max-width: 767px) {
  .pd-footer ul li {
    margin-bottom: 20px;
  }
}

.pd-footer ul li > .icon {
  width: 48px;
  height: 48px;
  display: -moz-flex;
  display: flex;
  -moz-justify-content: center;
  justify-content: center;
  -moz-align-items: center;
  align-items: center;
  border-radius: 50%;
  background-color: #F9BC16;
}

.pd-footer ul li > .icon > img {
  width: 35px;
  height: 35px;
}

.pd-footer ul li > .icon.icon-telephone {
  background-color: #fd7721;
}

.pd-footer ul li span {
  font-size: 36px;
  line-height: 36px;
  letter-spacing: 0.28px;
  padding-left: 20px;
}

@media screen and (max-width: 767px) {
  .pd-footer ul li span {
    font-size: 20px;
    line-height: 26px;
    padding-left: 5px;
  }
}

.pd-footer .copyright {
  color: rgba(132, 135, 141, 0.57);
  display: block;
  padding: 27px 0;
  letter-spacing: 0.18px;
  font-size: 14px;
  line-height: 14px;
}

@media screen and (max-width: 767px) {
  .pd-footer .copyright {
    padding: 10px 0;
  }
}

.pd-main {
  -moz-flex: 1;
  flex: 1;
}

.pd-main .providesk .providesk-banner {
  padding-top: 68px;
  padding-bottom: 400px;
  text-align: center;
  position: relative;
  overflow: hidden;
  background: #22103F image-url("banner-bg.png") no-repeat bottom right;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-banner {
    padding: 68px 15px 200px;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .providesk .providesk-banner {
    padding-bottom: 200px;
  }
}

.pd-main .providesk .providesk-banner:after {
  content: '';
  z-index: 0;
  background-color: #ffffff;
  height: 100px;
  width: 100%;
  border-radius: 100%;
  margin-bottom: -50px;
  position: absolute;
  left: 0;
  bottom: 0;
}

.pd-main .providesk .providesk-banner h2 {
  letter-spacing: normal;
  color: #ffffff;
  margin: 30px 0px 25px 0;
}

.pd-main .providesk .providesk-banner .btn-group {
  margin-top: 50px;
  padding-bottom: 64px;
}

.pd-main .providesk .providesk-banner .btn-group .btn {
  padding: 10px 50px;
  margin: 0 5px;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-banner .btn-group .btn {
    padding: 10px 15px;
    margin: 5px;
  }
}

.pd-main .providesk .providesk-banner .-info {
  color: #D1BBFA;
  width: 610px;
  margin: 0 auto;
  font-size: 18px;
  line-height: 28px;
  display: inline-block;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-banner .-info {
    width: auto;
  }
}

.pd-main .providesk .providesk-banner .eager-customer {
  padding: 7px 30px;
  border-radius: 23px;
  background-color: #3B265F;
  display: inline-block;
  color: #ffffff;
  font-size: 13px;
  line-height: 13px;
}

.pd-main .providesk .providesk-description {
  padding: 365px 0px 60px 0;
  position: relative;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description {
    padding: 200px 15px 20px 15px;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .providesk .providesk-description {
    padding: 365px 15px 20px 15px;
  }
}

.pd-main .providesk .providesk-description .video {
  width: 1000px;
  height: 600px;
  margin: 0 auto;
  position: absolute;
  top: -350px;
  left: 0;
  right: 0;
  bottom: 0;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .video {
    width: 300px;
    height: 200px;
    top: -150px;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .providesk .providesk-description .video {
    width: 700px;
    height: 500px;
    top: -150px;
  }
}

.pd-main .providesk .providesk-description .video img {
  max-width: 100%;
  height: auto;
}

.pd-main .providesk .providesk-description .-description {
  width: 862px;
  margin: 0 auto;
  text-align: center;
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .providesk .providesk-description .-description {
    width: 100%;
  }
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description {
    width: 100%;
  }
}

.pd-main .providesk .providesk-description .-description p {
  margin: 0 0 30px 0;
  font-size: 26px;
  line-height: 34px;
  letter-spacing: 0.2px;
  color: rgba(143, 146, 152, 0.57);
  text-align: center;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description p {
    font-size: 16px;
    line-height: 24px;
  }
}

.pd-main .providesk .providesk-description .-description p b {
  color: #2a2b2c;
}

.pd-main .providesk .providesk-description .-description a {
  color: #693CFF;
  font-size: 18px;
  line-height: 18px;
  letter-spacing: 0.14px;
}

.pd-main .providesk .providesk-description .-description-list {
  width: 1000px;
  margin: 0 auto;
  display: -moz-flex;
  display: flex;
  flex-wrap: wrap;
  padding: 81px 0 12px;
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .providesk .providesk-description .-description-list {
    width: 100%;
  }
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description-list {
    width: 100%;
    -moz-justify-content: center;
    justify-content: center;
  }
}

.pd-main .providesk .providesk-description .-description-list li {
  display: -moz-flex;
  display: flex;
  -moz-flex-direction: column;
  flex-direction: column;
  -moz-align-items: center;
  align-items: center;
  padding: 0px 50px 69px;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description-list li {
    padding: 0px 10px 19px;
    -moz-flex-direction: row;
    flex-direction: row;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .providesk .providesk-description .-description-list li {
    -moz-flex: 0 50%;
    flex: 0 50%;
  }
}

.pd-main .providesk .providesk-description .-description-list li > p {
  width: 225px;
  margin: 0 auto;
  text-align: center;
  padding: 13px 0 13px 0;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description-list li > p {
    width: 200px;
  }
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper {
  width: 167px;
  height: 167px;
  border-radius: 50%;
  background-color: #e66d1f;
  display: -moz-flex;
  display: flex;
  -moz-justify-content: center;
  justify-content: center;
  -moz-align-items: center;
  align-items: center;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description-list li > .img-wrapper {
    width: 90px;
    height: 90px;
  }
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper img {
  width: 86px;
  height: 98px;
}

@media screen and (max-width: 767px) {
  .pd-main .providesk .providesk-description .-description-list li > .img-wrapper img {
    width: 46px;
    height: 58px;
  }
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper.orange {
  background-color: #E66D1F;
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper.yellow {
  background-color: #F9BC16;
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper.cyan {
  background-color: #59DBBC;
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper.grey {
  background-color: #7F8388;
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper.green {
  background-color: #7DD91B;
}

.pd-main .providesk .providesk-description .-description-list li > .img-wrapper.purple {
  background-color: #754DFF;
}

.pd-main .rupees-per-month {
  display: -moz-flex;
  display: flex;
  -moz-flex-direction: column;
  flex-direction: column;
  -moz-align-items: center;
  align-items: center;
  padding-top: 78px;
  padding-bottom: 30px;
  position: relative;
  overflow: hidden;
  margin: 0px 147px;
}

@media screen and (max-width: 767px) {
  .pd-main .rupees-per-month {
    margin: 0 auto;
    -moz-justify-content: center;
    justify-content: center;
    text-align: center;
    padding-top: 38px;
  }
}

@media screen and (min-width: 768px) and (max-width: 991px) {
  .pd-main .rupees-per-month {
    margin: 0 auto;
    padding: 78px 15px 680px;
    text-align: center;
  }
}

.pd-main .rupees-per-month h2 {
  margin: 0 0 22px 0;
}

.pd-main .rupees-per-month h2 .value {
  font-size: 70px;
  line-height: 54px;
  color: #FF4555;
  margin-bottom: 0;
}

@media screen and (max-width: 767px) {
  .pd-main .rupees-per-month h2 .value {
    font-size: 50px;
  }
}

.pd-main .rupees-per-month span {
  color: #2A2B2C;
  font-size: 24px;
  line-height: 24px;
  letter-spacing: 0.18px;
  display: inline-block;
  margin-bottom: 48px;
}

.pd-main .rupees-per-month span a {
  color: #693CFF;
}

.pd-main .rupees-per-month span a:hover {
  color: #F9BC16;
}

.pd-main .rupees-per-month .box-shadow {
  position: absolute;
  bottom: 0;
  width: 100%;
  box-shadow: 0px 0px 100px 100px rgba(196, 191, 209, 0.31);
}

h2 {
  margin: 0;
  font-size: 54px;
  line-height: 54px;
  letter-spacing: 0.42px;
}

@media screen and (max-width: 767px) {
  h2 {
    font-size: 34px;
    line-height: 44px;
  }
}

h3 {
  margin: 0;
  font-size: 36px;
  line-height: 56px;
  letter-spacing: 0.28px;
}

@media screen and (max-width: 767px) {
  h3 {
    font-size: 24px;
    line-height: 34px;
  }
}

a {
  text-decoration: none;
  color: #ffffff;
}

p {
  margin: 0;
}

ul {
  padding: 0;
  list-style-type: none;
}

.btn {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  border: 1px solid transparent;
  padding: .375rem .75rem;
  font-size: 1rem;
  line-height: 1.5;
  border-radius: 23px;
  transition: background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}

.btn-yellow {
  background-color: #F9BC16;
  color: #ffffff;
  border-color: #F9BC16;
}

.btn-outline-yellow {
  background-color: #22103F;
  color: #F9BC16;
  border-color: #F9BC16;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

form_main {
    width: 100%;
}
.form_main h4 {
    font-family: roboto;
    font-size: 20px;
    font-weight: 300;
    margin-bottom: 15px;
    margin-top: 20px;
    text-transform: uppercase;
}
.heading {
    border-bottom: 1px solid #fcab0e;
    padding-bottom: 9px;
    position: relative;
}
.heading span {
    background: #9e6600 none repeat scroll 0 0;
    bottom: -2px;
    height: 3px;
    left: 0;
    position: absolute;
    width: 75px;
}   
.form {
    border-radius: 7px;
    padding: 6px;
}
.txt[type="text"] {
    border: 1px solid #ccc;
    margin: 10px 0;
    padding: 10px 0 10px 5px;
    width: 100%;
}
.txt_3[type="text"] {
    margin: 10px 0 0;
    padding: 10px 0 10px 5px;
    width: 100%;
}
.txt2[type="submit"] {
    background: #242424 none repeat scroll 0 0;
    border: 1px solid #4f5c04;
    border-radius: 25px;
    color: #fff;
    font-size: 16px;
    font-style: normal;
    line-height: 35px;
    margin: 10px 0;
    padding: 0;
    text-transform: uppercase;
    width: 30%;
}
.txt2:hover {
    background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
    color: #5793ef;
    transition: all 0.5s ease 0s;
}

